% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{ccpca}
\alias{ccpca}
\title{ccpca: Sparse pca with cardinality constraints on the component weights}
\usage{
ccpca(
  X,
  ncomp,
  nzeros,
  itr,
  Wstart,
  nStarts = 1L,
  tol = 1e-07,
  printLoss = TRUE
)
}
\arguments{
\item{X}{A data matrix of class 'matrix'}

\item{ncomp}{The number of components to estimate (an integer)}

\item{nzeros}{A vector of length ncomp containing the number of desired zeros in the columns of the component weight matrix \code{W}}

\item{itr}{The maximum number of iterations (an integer)}

\item{Wstart}{A matrix of \code{ncomp} columns and \code{nrow(X)} rows with starting values for the component weight matrix \code{W}, if \code{Wstart} only contains zeros, a warm start is used: the first \code{ncomp} right singular vectors of \code{X}}

\item{nStarts}{The number of random starts the analysis should perform. The first start will be performed with the values given by \code{Wstart}. The consecutive starts will be \code{Wstart} plus a matrix with random uniform values times the current start number (the first start has index zero). The default value is 1.}

\item{tol}{The convergence is determined by comparing the loss function value after each iteration, if the difference is smaller than \code{tol} the analysis is converged. The default value is \code{10e-8}}

\item{printLoss}{A boolean: \code{TRUE} will print the loss function value each 10th iteration.}
}
\value{
A list containing: \cr
\code{W} A matrix containing the component weights \cr
\code{P} A matrix containing the loadings \cr
\code{loss} A numeric variable containing the minimum loss function value of all the \code{nStarts} starts \cr
\code{converged} A boolean containing \code{TRUE} if converged \code{FALSE} if not converged.
}
\description{
This function performs PCA with cardinality constraints on the component weights.
}
\examples{

I <- 100
J <- 50 
ncomp <- 3
X <- matrix(rnorm(I*J), I, J)

ccpca(X = X, ncomp = ncomp,  nzeros = c(10, 20, 30), itr = 100000, 
     Wstart = matrix(0, J, ncomp), nStarts = 1, tol = 10^-8, printLoss = TRUE)

# Extended example: Perform CCPCA, with oracle information
# create sample data
ncomp <- 3 
J <- 30
comdis <- matrix(1, J, ncomp)

comdis <- sparsify(comdis, 0.5) #set 10 percent of the 1's to zero
variances <- makeVariance(varianceOfComps = c(100, 80, 90), J = J, error = 0.05) #create realistic eigenvalues
dat <- makeDat(n = 100, comdis = comdis, variances = variances)
X <- dat$X

#check how many zero's are in the data generating model
nzeros <- apply(dat$P[, 1:ncomp], 2, function(x) {return(sum(x == 0))} )
nzeros

#run the analysis with oracle information of the exact number of zero's in the component weights 
results <- ccpca(X = X, ncomp = ncomp,  nzeros = nzeros, itr = 10000000, 
      Wstart = matrix(0, J, ncomp), nStarts = 1, tol = 10^-8, printLoss = TRUE)

#inspect the results
head(results$W) 
head(dat$P[, 1:ncomp])

}
